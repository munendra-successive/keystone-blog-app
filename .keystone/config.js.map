{
  "version": 3,
  "sources": ["../keystone.ts", "../auth.ts", "../schema.ts", "../custom-field/index.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from \"@keystone-6/core\";\nimport { session } from \"./auth\";\n\n// to keep this file tidy, we define our schema in a different file\nimport { lists } from \"./schema\";\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { createAuth } from \"@keystone-6/auth\";\nimport { statelessSessions } from \"@keystone-6/core/session\";\nimport { withAuth } from \"./auth\";\n\n// const { withAuth } = createAuth({\n//   listKey: \"User\",\n//   identityField: \"email\",\n//   secretField: \"password\",\n//   sessionData: \"isAdmin\",\n// });\n\n// export const session = statelessSessions({\n//   secret: \"12345678901234567890123456789012\",\n// });\n\nconst baseUrl = \"http://localhost:3000\";\n\nexport default withAuth(\n  config({\n    db: {\n      provider: \"postgresql\",\n      url: \"postgres://postgres:postgres@localhost:5432/keystone\",\n      onConnect: async (context) => {\n        /* ... */\n      },\n      // Optional advanced configuration\n      enableLogging: true,\n      idField: { kind: \"uuid\" },\n      shadowDatabaseUrl: \"postgres://postgres:postgres@localhost:5432/shadowdb\",\n    },\n    lists,\n    storage: {\n      // The key here will be what is referenced in the image field\n      my_local_images: {\n        // Images that use this store will be stored on the local machine\n        kind: \"local\",\n        // This store is used for the image field type\n        type: \"image\",\n        // The URL that is returned in the Keystone GraphQL API\n        generateUrl: (path) => `${baseUrl}/images${path}`,\n        // The route that will be created in Keystone's backend to serve the images\n        serverRoute: {\n          path: \"/images\",\n        },\n        storagePath: \"public/images\",\n      },\n    },\n    session,\n  })\n);\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\nimport { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\nimport { text as TextField } from \"./custom-field\";\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n  image,\n  checkbox,\n} from \"@keystone-6/core/fields\";\n\n// the document field is a more complicated field, so it has it's own package\nimport { document } from \"@keystone-6/fields-document\";\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport type { Lists } from \".keystone/types\";\nimport { ListOperationAccessControl } from \"@keystone-6/core/types\";\n\n// export type Session = {\n//   data: {\n//     id: string;\n//     isAdmin: boolean;\n//   };\n// };\n\n// const isAdmin = ({ session }: { session?: Session }) => {\n//   // you need to have a session to do this\n//   if (!session) return false;\n\n//   // admins can do anything\n//   if (session?.data.isAdmin) return true;\n\n//   // otherwise, no\n//   return false;\n// };\n\n// const filterPosts = ({ session }: { session?: Session }) => {\n//   // you need to have a session to do this\n//   if (!session) return false;\n\n//   // admins can see everything\n//   if (session.data?.isAdmin) return true;\n\n//   // the authenticated user can only see themselves\n//   return { status: { equals: \"published\" } };\n// };\n\nexport const lists: Lists = {\n  User: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // this is the fields for our User list\n    fields: {\n      // by adding isRequired, we enforce that every User should have a name\n      //   if no name is provided, an error will be displayed\n      name: text({\n        validation: { isRequired: true },\n      }),\n\n      email: text({\n        validation: { isRequired: true },\n        // by adding isIndexed: 'unique', we're saying that no user can have the same\n        // email as another user - this may or may not be a good idea for your project\n        isIndexed: \"unique\",\n      }),\n\n      password: password({ validation: { isRequired: true } }),\n      // isAdmin: checkbox(),\n\n      // we can use this field to see what Posts this User has authored\n      //   more on that in the Post list below\n      posts: relationship({ ref: \"Post.author\", many: true }),\n\n      createdAt: timestamp({\n        // this sets the timestamp to Date.now() when the user is first created\n        defaultValue: { kind: \"now\" },\n      }),\n    },\n  }),\n\n  Image: list({\n    fields: {\n      name: text({\n        validation: {\n          isRequired: true,\n        },\n      }),\n      image: image({\n        storage: \"my_local_images\",\n      }),\n    },\n    access: allowAll,\n    ui: {\n      isHidden: true,\n    },\n  }),\n  Post: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n    // {\n    //   operation: {\n    //     query: allowAll,\n    //     create: isAdmin,\n    //     update: isAdmin,\n    //     delete: isAdmin,\n    //   },\n    //   filter: {\n    //     query: filterPosts,\n    //   },\n    // },\n\n    // this is the fields for our Post list\n    fields: {\n      title: text({ validation: { isRequired: true } }),\n      publishedAt: timestamp({ defaultValue: { kind: \"now\" } }),\n      images: relationship({\n        ref: \"Image\",\n        many: true,\n      }),\n      customField: TextField({\n        ui: {\n          description: \"Just for a practice\",\n        },\n      }),\n      status: select({\n        options: [\n          { label: \"Published\", value: \"published\" },\n          { label: \"Draft\", value: \"draft\" },\n        ],\n        defaultValue: \"draft\",\n        ui: { displayMode: \"segmented-control\" },\n      }),\n\n      // the document field can be used for making rich editable content\n      //   you can find out more at https://keystonejs.com/docs/guides/document-fields\n      Description: document({\n        formatting: true,\n        layouts: [\n          [1, 1],\n          [1, 1, 1],\n          [2, 1],\n          [1, 2],\n          [1, 2, 1],\n        ],\n        links: true,\n        dividers: true,\n      }),\n\n      // with this field, you can set a User as the author for a Post\n      author: relationship({\n        // we could have used 'User', but then the relationship would only be 1-way\n        ref: \"User.posts\",\n\n        // this is some customisations for changing how this will look in the AdminUI\n        ui: {\n          displayMode: \"cards\",\n          cardFields: [\"name\", \"email\"],\n          inlineEdit: { fields: [\"name\", \"email\"] },\n          linkToItem: true,\n          inlineConnect: true,\n        },\n\n        // a Post can only have one author\n        //   this is the default, but we show it here for verbosity\n        many: false,\n      }),\n\n      // with this field, you can add some Tags to Posts\n      tags: relationship({\n        // we could have used 'Tag', but then the relationship would only be 1-way\n        ref: \"Tag.posts\",\n\n        // a Post can have many Tags, not just one\n        many: true,\n\n        // this is some customisations for changing how this will look in the AdminUI\n        ui: {\n          displayMode: \"cards\",\n          cardFields: [\"name\"],\n          inlineEdit: { fields: [\"name\"] },\n          linkToItem: true,\n          inlineConnect: true,\n          inlineCreate: { fields: [\"name\"] },\n        },\n      }),\n    },\n  }),\n\n  // this last list is our Tag list, it only has a name field for now\n  Tag: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // setting this to isHidden for the user interface prevents this list being visible in the Admin UI\n    ui: {\n      isHidden: true,\n    },\n\n    // this is the fields for our Tag list\n    fields: {\n      name: text(),\n      // this can be helpful to find out all the Posts associated with a Tag\n      posts: relationship({ ref: \"Post.tags\", many: true }),\n    },\n  }),\n};\n", "import {\n  type BaseListTypeInfo,\n  fieldType,\n  type FieldTypeFunc,\n  type CommonFieldConfig,\n  orderDirectionEnum,\n} from \"@keystone-6/core/types\";\nimport { graphql } from \"@keystone-6/core\";\n\ntype TextFieldConfig<ListTypeInfo extends BaseListTypeInfo> =\n  CommonFieldConfig<ListTypeInfo> & {\n    isIndexed?: boolean | \"unique\";\n  };\n\nexport function text<ListTypeInfo extends BaseListTypeInfo>({\n  isIndexed,\n  ...config\n}: TextFieldConfig<ListTypeInfo> = {}): FieldTypeFunc<ListTypeInfo> {\n  return (meta) =>\n    fieldType({\n      kind: \"scalar\",\n      mode: \"optional\",\n      scalar: \"String\",\n      index: isIndexed === true ? \"index\" : isIndexed || undefined,\n    })({\n      ...config,\n      input: {\n        create: {\n          arg: graphql.arg({ type: graphql.String }),\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          resolve(value, context) {\n            return value;\n          },\n        },\n        update: { arg: graphql.arg({ type: graphql.String }) },\n        orderBy: { arg: graphql.arg({ type: orderDirectionEnum }) },\n      },\n      output: graphql.field({\n        type: graphql.String,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        resolve({ value, item }, args, context, info) {\n          return value;\n        },\n      }),\n      views: \"./custom-field/views\",\n      getAdminMeta() {\n        return {};\n      },\n    });\n}\n"],
  "mappings": "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",
  "names": ["import_core", "import_core", "config"]
}
